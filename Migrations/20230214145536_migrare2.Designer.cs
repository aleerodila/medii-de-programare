// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Salon.Data;

#nullable disable

namespace Salon.Migrations
{
    [DbContext(typeof(SalonContext))]
    [Migration("20230214145536_migrare2")]
    partial class migrare2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Salon.Models.Categorie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Numecategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("Salon.Models.CategorieServiciu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CategorieID")
                        .HasColumnType("int");

                    b.Property<int>("ServiciuID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategorieID");

                    b.HasIndex("ServiciuID");

                    b.ToTable("CategorieServiciu");
                });

            modelBuilder.Entity("Salon.Models.Orar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Numeorar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Orar");
                });

            modelBuilder.Entity("Salon.Models.Profesionist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Profesionist");
                });

            modelBuilder.Entity("Salon.Models.Serviciu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Numeserviciu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrarID")
                        .HasColumnType("int");

                    b.Property<decimal>("Pret")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("ProfesionistID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrarID");

                    b.HasIndex("ProfesionistID");

                    b.ToTable("Serviciu");
                });

            modelBuilder.Entity("Salon.Models.CategorieServiciu", b =>
                {
                    b.HasOne("Salon.Models.Categorie", "Categorie")
                        .WithMany("CategoriiServiciu")
                        .HasForeignKey("CategorieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Salon.Models.Serviciu", "Serviciu")
                        .WithMany("CategoriiServiciu")
                        .HasForeignKey("ServiciuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Serviciu");
                });

            modelBuilder.Entity("Salon.Models.Serviciu", b =>
                {
                    b.HasOne("Salon.Models.Orar", "Orar")
                        .WithMany("Servicii")
                        .HasForeignKey("OrarID");

                    b.HasOne("Salon.Models.Profesionist", "Profesionist")
                        .WithMany("Servicii")
                        .HasForeignKey("ProfesionistID");

                    b.Navigation("Orar");

                    b.Navigation("Profesionist");
                });

            modelBuilder.Entity("Salon.Models.Categorie", b =>
                {
                    b.Navigation("CategoriiServiciu");
                });

            modelBuilder.Entity("Salon.Models.Orar", b =>
                {
                    b.Navigation("Servicii");
                });

            modelBuilder.Entity("Salon.Models.Profesionist", b =>
                {
                    b.Navigation("Servicii");
                });

            modelBuilder.Entity("Salon.Models.Serviciu", b =>
                {
                    b.Navigation("CategoriiServiciu");
                });
#pragma warning restore 612, 618
        }
    }
}
